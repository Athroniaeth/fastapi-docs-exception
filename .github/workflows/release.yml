name: Release

on:
  push:
    tags:
      - 'v*.*.*'

permissions:
  contents: write       # to create GitHub Releases and upload assets
  id-token: write       # to authenticate with PyPI via OIDC

jobs:
  test:
    name: Test & Lint
    runs-on: ubuntu-latest
    steps:
      - name: Checkout full history (including tags)
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up uv & Python
        uses: astral-sh/setup-uv@v6
        with:
          python-version: 3.12

      - name: Sync all dependencies
        run: uv sync --locked --all-extras --dev --no-progress -q

      - name: Run tests
        run: uv run pytest -q

      - name: Run lint, format & type checks
        run: uv run lint

  build:
    name: Build Distributions
    needs: test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up uv & Python
        uses: astral-sh/setup-uv@v6
        with:
          python-version: 3.12

      - name: Sync production dependencies
        run: uv sync --locked --no-dev --no-progress -q

      - name: Build source and wheel
        run: uv build --no-sources

      - name: Upload dist artifacts
        uses: actions/upload-artifact@v4
        with:
          name: dist
          path: dist/*

  release:
    name: Create GitHub Release & Publish
    needs: build
    runs-on: ubuntu-latest
    environment:
      name: pypi
      url: https://pypi.org/project/your-package-name/
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Create GitHub Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref_name }}
          release_name: Release ${{ github.ref_name }}
          body: |
            Changelog generated by Commitizen for version ${{ github.ref_name }}.
          draft: false
          prerelease: false

      - name: Upload release assets
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: dist/*.tar.gz
          asset_name: your-package-${{ github.ref_name }}.tar.gz
          asset_content_type: application/gzip

      - name: Download dist artifacts
        uses: actions/download-artifact@v4
        with:
          name: dist
          path: dist

      - name: Publish to PyPI
        env:
          UV_PUBLISH_TOKEN: ${{ secrets.PYPI_TOKEN }}
        run: uv publish --no-sync
